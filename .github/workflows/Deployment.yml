name: Main Workflow

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy and Restart
        env:
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SERVER_USER: ${{ secrets.USERNAME }}
          SERVER_IP: ${{ secrets.HOST }}
          PROJECT_DIR: ${{ secrets.PROJECT_DIR }}
          PM2_PROCESS_NAME: ${{ secrets.PM2_PROCESS_NAME }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no "${{ secrets.USERNAME }}@${{ secrets.HOST }}" << 'ENDSSH'
          set -e  # Exit on any error
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

          if [ -f "$HOME/.profile" ]; then
            source "$HOME/.profile"
          fi

          cd ${{ secrets.PROJECT_DIR }}

          if [ -d ".next.bak" ]; then
            echo "Removing previous backup"
            rm -rf .next.bak
          fi

          if [ -d ".next" ]; then
            mv .next .next.bak
          fi

          git fetch origin main
          git reset --hard origin/main

          # reset .env file
          echo "Resetting .env file"
          rm -f .env

          echo "Setting up environment variables"

            echo "CONTRIBUTION_GRAPH_SECRET=${{ secrets.CONTRIBUTION_GRAPH_SECRET }}" >> .env
            echo "REPO_NAME=${{ secrets.REPO_NAME }}" >> .env
            echo "RESEND_API=${{ secrets.RESEND_API }}" >> .env
            echo "RESEND_TO_EMAIL=${{ secrets.RESEND_TO_EMAIL }}" >> .env
            echo "RESEND_FROM_EMAIL=${{ secrets.RESEND_FROM_EMAIL }}" >> .env
            echo "RESEND_USER_MAIL_SENDER_MAIL=${{ secrets.RESEND_USER_MAIL_SENDER_MAIL }}" >> .env
            echo "BLOG_URL=${{ secrets.BLOG_URL }}" >> .env
            echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
            echo "NEXTAUTH_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
            echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
            echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
            echo "AUTH_TRUST_HOST=true" >> .env

          command -v pnpm >/dev/null || npm install -g pnpm
          command -v pm2 >/dev/null || npm install -g pm2

          pnpm install --frozen-lockfile --prefer-offline
          pnpm run ins
          NEXT_TELEMETRY_DISABLED=1 pnpm run build

          if [ $? -eq 0 ]; then
            rm -rf .next.bak
            pm2 restart ${{ secrets.PM2_PROCESS_NAME }} --update-env
          else
            rm -rf .next
            mv .next.bak .next
            echo "Build failed, restored previous build"
            exit 1
          fi
          ENDSSH
