name: Deploy Images to GHCR

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  push-store-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare versions and ensure lowercase repository name
        id: prep
        run: |
          # Convert repository name to lowercase
          REPO_LC="${GITHUB_REPOSITORY,,}"
          echo "REPO=$REPO_LC" >> $GITHUB_ENV

          # Generate versions
          echo "DATE_VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
          echo "SHA_VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV

          # Extract tag if it exists, otherwise use 'fallback'
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/}
          else
            TAG_VERSION="fallback"
          fi
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO }}:latest
            ${{ env.REGISTRY }}/${{ env.REPO }}:${{ env.DATE_VERSION }}
            ${{ env.REGISTRY }}/${{ env.REPO }}:${{ env.SHA_VERSION }}
            ${{ env.REGISTRY }}/${{ env.REPO }}:${{ env.TAG_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify no untagged images
        run: |
          # List images and ensure no untagged ones
          UNTAGGED_IMAGES=$(docker images --filter "dangling=true" -q)
          if [ -n "$UNTAGGED_IMAGES" ]; then
            echo "Error: There are untagged images present!"
            exit 1
          fi

      - name: Cleanup dangling images
        if: always()
        run: docker image prune -f
